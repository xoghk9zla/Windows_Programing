#include <Windows.h>

HINSTANCE g_hInst;
LPCTSTR lpszClass = "window programe 2-6";	// 제목

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;
	g_hInst = hInstance;

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;
	WndClass.lpfnWndProc = (WNDPROC)WndProc;
	WndClass.lpszClassName = lpszClass;
	WndClass.lpszMenuName = NULL;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;

	RegisterClass(&WndClass);

	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, 0, 0, 1200, 700, NULL, (HMENU)NULL, hInstance, NULL); //윈도우 클래스 이름, 타이틀 이름, 스타일, x좌표, y좌표, 폭, 높이, 부모윈도우 핸들, 메뉴 핸들, 응용 프로그램id, 생성된 윈도우 정보 

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)){
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam){
	HDC hdc;
	PAINTSTRUCT ps;
	static int count, yPos, line, save;
	static char str[10][99], color;
	static SIZE size;
	int i,j;
	switch (uMsg)
	{
	case WM_CREATE:
		CreateCaret(hWnd, NULL, 5, 15);
		ShowCaret(hWnd);
		count = 0;
		line = 0;
		yPos = 0;
		return 0;

	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);

		for (i = 0; i <= line; i++){

			if (str[i][0] >= '0' && str[i][0] <= '9'){
				SetTextColor(hdc, RGB(255, 0, 0));
				GetTextExtentPoint(hdc, str[i], strlen(str[i]), &size);
				TextOut(hdc, 0, i * 20, str[i], strlen(str[i]));
				SetCaretPos(size.cx, i * 20);
			}
			else{
				SetTextColor(hdc, RGB(0, 0, 0));
				GetTextExtentPoint(hdc, str[i], strlen(str[i]), &size);
				TextOut(hdc, 0, i * 20, str[i], strlen(str[i]));
				SetCaretPos(size.cx, i * 20);
			}
		}
		EndPaint(hWnd, &ps);
		break;

	case WM_CHAR:
		hdc = GetDC(hWnd);
		if (wParam == VK_BACK){
			--count;
			if (count <= 0){
				yPos -= 20;
				--line;
				count = strlen(str[line]);
			}
		}
		else if (wParam == VK_RETURN)
		{
			if (line < 9){
				count = 0;
				yPos += 20;
				line++;
			}
		}
		else if (wParam == VK_ESCAPE)
		{

			for (; count > 0; --count)
				str[line][count] = '\0';
			yPos = 0;
			line = 0;
		}
		else if (wParam == VK_TAB)
		{
			for (i = 0; i < 4; ++i){
				str[line][count++] = ' ';
			}
		}
		else{
			if (count < 10 && (wParam >= 'A' && wParam <= 'Z' || wParam >= 'a' && wParam <= 'z')){
				if (str[line][0] >= '0' && str[line][0] <= '9'){
					count = 0;
					yPos += 20;
					line++;
				}
				str[line][count++] = wParam;

			}
			else if (count < 10 && (wParam >= '0' && wParam <= '9')){
				color = 'R';
				if (count > 0){
					count = 0;
					yPos += 20;
					line++;
				}

				str[line][count++] = wParam;

			}
			else if (count == 10){
				if (line < 9){
					count = 0;
					yPos += 20;
					line++;
				}
			}
			if (wParam == 'Q' || wParam == 'q'){
				HideCaret(hWnd);
				DestroyCaret();
				PostQuitMessage(0);
			}
		}
		str[line][count] = '\0';
		InvalidateRect(hWnd, NULL, TRUE);
		ReleaseDC(hWnd, hdc);
		break;
	case WM_KEYDOWN:
		if (wParam == VK_CONTROL){
			for (i = 0; i <= line; ++i){
				for (j = 0; j < strlen(str[i]); ++j){
					if (str[i][j] >= 'a' && str[i][j] <= 'z')
						str[i][j] -= 32;
					else if (str[i][j] >= 'A' && str[i][j] <= 'Z')
						str[i][j] += 32;
				}
			}
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == VK_DELETE){
			for (i = 0; i < strlen(str[line]); ++i){
				str[line][i] = str[line][i + 1];
				}
			count--;
				if (count <= 0){
					yPos -= 20;
					--line;
					count = strlen(str[line]);
				}
			
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == VK_LEFT)
		{
			if (count > 0)
				--count; 
			InvalidateRect(hWnd, NULL, TRUE);
			SetCaretPos(count, line);
			
		}

		else if (wParam == VK_RIGHT)
		{
			++count;
			SetCaretPos(size.cx, line);
			InvalidateRect(hWnd, NULL, TRUE);
		}

		else if (wParam == VK_UP)
		{
			if (line > 0)
				--line;
			SetCaretPos(size.cx, line);
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == VK_DOWN)
		{
			++line;
			SetCaretPos(size.cx, line);
			InvalidateRect(hWnd, NULL, TRUE);
		}
		break;
	case WM_DESTROY:
		HideCaret(hWnd);
		DestroyCaret();
		PostQuitMessage(0);
		return 0;
	default:
		break;
	}
	return DefWindowProc(hWnd, uMsg, wParam, lParam);
}