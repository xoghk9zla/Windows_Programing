#include <stdio.h>
#include <Windows.h>
#include <math.h>

#define _CRT_SECURE_NO_WARNINGS
#define PI 3.141592
HINSTANCE g_hInst;
LPCTSTR lpszClass = "window programe 3-2";	// 제목

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
double GetRad(int angle){ return angle / (180 * PI); }
struct Shape{
	int cenX, cenY, r, dir, color[3];
	Shape(){}
	Shape(int x, int y, int r) : cenX(x), cenY(y), r(r){}
};

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;
	g_hInst = hInstance;

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;
	WndClass.lpfnWndProc = (WNDPROC)WndProc;
	WndClass.lpszClassName = lpszClass;
	WndClass.lpszMenuName = NULL;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;

	RegisterClass(&WndClass);

	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, 0, 0, 1200, 700, NULL, (HMENU)NULL, hInstance, NULL); //윈도우 클래스 이름, 타이틀 이름, 스타일, x좌표, y좌표, 폭, 높이, 부모윈도우 핸들, 메뉴 핸들, 응용 프로그램id, 생성된 윈도우 정보

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)){
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam){
	HDC hdc;
	PAINTSTRUCT ps;
	HPEN hPen, oldPen;
	HBRUSH hBrush, oldBrush;
	static int angle, shape;
	static Shape orbit[4] = { { 215, 215, 70 }, { 415, 215, 70 }, { 215, 415, 70 }, { 415, 415, 70 } };

	switch (uMsg)
	{
	case WM_CREATE:
		for (int i = 0; i < 4; ++i){
			orbit[i].dir = rand() % 2, shape = 1;
			orbit[i].color[0] = rand() % 255 + 1, orbit[i].color[1] = rand() % 255 + 1, orbit[i].color[2] = rand() % 255 + 1;
		}
		angle = 0;
		SetTimer(hWnd, 1, 10, NULL);
		SetTimer(hWnd, 2, 1000, NULL);
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		//궤도
		hPen = CreatePen(PS_SOLID, 2, RGB(0, 0, 255));
		oldPen = (HPEN)SelectObject(hdc, hPen);
		for (int i = 0; i < 4; ++i)
			Ellipse(hdc, orbit[i].cenX - orbit[i].r, orbit[i].cenY - orbit[i].r, orbit[i].cenX + orbit[i].r, orbit[i].cenY + orbit[i].r);
		SelectObject(hdc, oldPen);
		DeleteObject(hPen);
		//중심원
		hBrush = CreateSolidBrush(RGB(255, 0, 0));
		oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
		for (int i = 0; i < 4; ++i)
			Ellipse(hdc, orbit[i].cenX - 15, orbit[i].cenY - 15, orbit[i].cenX + 15, orbit[i].cenY + 15);
		SelectObject(hdc, oldBrush);
		DeleteObject(hBrush);
		//공전원
		if (shape == 1){
			for (int i = 0; i < 4; ++i){
				hBrush = CreateSolidBrush(RGB(orbit[i].color[0], orbit[i].color[1], orbit[i].color[2]));
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Ellipse(hdc, orbit[i].cenX - 15 + orbit[i].r*cos(GetRad(angle)), orbit[i].cenY - 15 + orbit[i].r*sin(GetRad(angle)), orbit[i].cenX + 15 + orbit[i].r*cos(GetRad(angle)), orbit[i].cenY + 15 + orbit[i].r*sin(GetRad(angle)));
			}
			SelectObject(hdc, oldBrush);
			DeleteObject(hBrush);
		}
		else{
			for (int i = 0; i < 4; ++i){
				hBrush = CreateSolidBrush(RGB(orbit[i].color[0], orbit[i].color[1], orbit[i].color[2]));
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Rectangle(hdc, orbit[i].cenX - 15 + orbit[i].r*cos(GetRad(angle)), orbit[i].cenY - 15 + orbit[i].r*sin(GetRad(angle)), orbit[i].cenX + 15 + orbit[i].r*cos(GetRad(angle)), orbit[i].cenY + 15 + orbit[i].r*sin(GetRad(angle)));
			}
			SelectObject(hdc, oldBrush);
			DeleteObject(hBrush);
		}
		ReleaseDC(hWnd, hdc);
		EndPaint(hWnd, &ps);
		break;

	case WM_CHAR:
		switch (wParam){
		case 'r'://방향거꾸로
			for (int i = 0; i < 4; ++i){
				if (orbit[i].dir == 0)
					orbit[i].dir = 1;
				else if (orbit[i].dir == 1)
					orbit[i].dir = 0;
			}
			break;
		case 't'://공전하는게 사각형으로
			if (shape == 1)
				shape = 2;
			else
				shape = 1;
			break;
		case 'q'://종료
			PostQuitMessage(0);
			break;
		}
	case WM_TIMER:
		switch (wParam)
		{
		case 1:
			for (int i = 0; i < 4; ++i){
				if (orbit[i].dir == 0)
					++angle;
				else if (orbit[i].dir == 1)
					--angle;
			}
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);

		return 0;
	default:
		break;
	}
	return DefWindowProc(hWnd, uMsg, wParam, lParam);
}