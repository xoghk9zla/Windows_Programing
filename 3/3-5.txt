#include <Windows.h>
#include <math.h>

HINSTANCE g_hInst;
LPCTSTR lpszClass = "window programe 3-5";	// 제목

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

struct Shape{
	int cenX, cenY, r, color[3], cnt=0, up=1;
	bool sel;
	Shape(){}
	Shape(int x, int y, int r) : cenX(x), cenY(y), r(r){}
};
float LengthPts(Shape s, int x2, int y2)
{
	return (sqrt((float)(x2 - s.cenX)*(x2 - s.cenX) + (y2 - s.cenY)*(y2 - s.cenY)));
}
BOOL InCircle(Shape c, int mx, int my)
{
	if (LengthPts(c, mx, my) < c.r)
		return TRUE;
	else return FALSE;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;
	g_hInst = hInstance;

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;
	WndClass.lpfnWndProc = (WNDPROC)WndProc;
	WndClass.lpszClassName = lpszClass;
	WndClass.lpszMenuName = NULL;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;

	RegisterClass(&WndClass);

	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, 0, 0, 1200, 700, NULL, (HMENU)NULL, hInstance, NULL); //윈도우 클래스 이름, 타이틀 이름, 스타일, x좌표, y좌표, 폭, 높이, 부모윈도우 핸들, 메뉴 핸들, 응용 프로그램id, 생성된 윈도우 정보

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)){
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam){
	HDC hdc;
	PAINTSTRUCT ps;
	HPEN hPen, oldPen;
	HBRUSH  hBrush, oldBrush;
	int mx, my;
	static Shape Circle[10];
	switch (uMsg)
	{
	case WM_CREATE:
		SetTimer(hWnd, 1, 1000, NULL);
		for (int i = 0; i < 10; ++i){
			Circle[i].cenX = rand() % 1100, Circle[i].cenY = rand() % ((1400- 600)+1)+600, Circle[i].r = rand() % ((100-75)+1)+75;
			Circle[i].color[0] = rand() % 255 + 1, Circle[i].color[1] = rand() % 255 + 1, Circle[i].color[2] = rand() % 255 + 1;
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		for (int i = 0; i < 10; ++i){
			hPen = CreatePen(PS_SOLID, 1, RGB(0, 0, 0));
			oldPen = (HPEN)SelectObject(hdc, hPen);
			hBrush = CreateSolidBrush(RGB(Circle[i].color[0], Circle[i].color[1], Circle[i].color[2]));
			oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
			if (Circle[i].up == 0){
				Ellipse(hdc, Circle[i].cenX - Circle[i].r, Circle[i].cenY - Circle[i].r / 3, Circle[i].cenX + Circle[i].r, Circle[i].cenY + Circle[i].r / 3);
				MoveToEx(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r/3, NULL);
				LineTo(hdc, Circle[i].cenX - 5, Circle[i].cenY + Circle[i].r/3 + 5);
				MoveToEx(hdc, Circle[i].cenX - 5, Circle[i].cenY + Circle[i].r/3 + 5, NULL);
				LineTo(hdc, Circle[i].cenX + 5, Circle[i].cenY + Circle[i].r/3 + 5);
				MoveToEx(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r/3, NULL);
				LineTo(hdc, Circle[i].cenX + 5, Circle[i].cenY + Circle[i].r/3 + 5);
				MoveToEx(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r/3 + 5, NULL);
				LineTo(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r/3 + 50);
			}
			else{
				Ellipse(hdc, Circle[i].cenX - Circle[i].r, Circle[i].cenY - Circle[i].r, Circle[i].cenX + Circle[i].r, Circle[i].cenY + Circle[i].r);
				MoveToEx(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r, NULL);
				LineTo(hdc, Circle[i].cenX - 5, Circle[i].cenY + Circle[i].r + 5);
				MoveToEx(hdc, Circle[i].cenX - 5, Circle[i].cenY + Circle[i].r + 5, NULL);
				LineTo(hdc, Circle[i].cenX + 5, Circle[i].cenY + Circle[i].r + 5);
				MoveToEx(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r, NULL);
				LineTo(hdc, Circle[i].cenX + 5, Circle[i].cenY + Circle[i].r + 5);
				MoveToEx(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r + 5, NULL);
				LineTo(hdc, Circle[i].cenX, Circle[i].cenY + Circle[i].r + 50);
			}

		}
		SelectObject(hdc, oldPen);
		DeleteObject(hPen);
		SelectObject(hdc, oldBrush);
		DeleteObject(hBrush);
		ReleaseDC(hWnd, hdc);
		EndPaint(hWnd, &ps);
		break;
	case WM_LBUTTONDOWN: // 왼쪽 버튼 누르면
		mx = LOWORD(lParam);
		my = HIWORD(lParam);
		for (int i = 0; i < 10; ++i){
			if (InCircle(Circle[i], mx, my)){
				Circle[i].sel = TRUE;
				Circle[i].r += 5;
				++Circle[i].cnt;
				if (Circle[i].cnt == 3){
					Circle[i].up = 0;
					SetTimer(hWnd, 2, 100, NULL);
					Circle[i].cnt = 0;
				}
			}
		}
		break;
	case WM_TIMER:
		switch (wParam)
		{
		case 1:
			for (int i = 0; i < 10; ++i){
				Circle[i].cenY -= 20;
				if (Circle[i].cenY <= 0)
					Circle[i].cenY = rand() % ((1400 - 600) + 1) + 600;
			}
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case 2:
			for (int i = 0; i < 10; ++i){
				if (Circle[i].up == 0){
					Circle[i].cenY += 40;
				}
				if (Circle[i].cenY >= 700){
					Circle[i].cenX = rand() % 1100, Circle[i].cenY = rand() % ((1400 - 600) + 1) + 600, Circle[i].r = rand() % 50;
					Circle[i].color[0] = rand() % 255 + 1, Circle[i].color[1] = rand() % 255 + 1, Circle[i].color[2] = rand() % 255 + 1;
					Circle[i].up = 1;
				}

			}
			InvalidateRect(hWnd, NULL, TRUE);

			break;
		default:
			break;
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);

		return 0;
	default:
		break;
	}
	return DefWindowProc(hWnd, uMsg, wParam, lParam);
}